# -*- coding: utf-8 -*-
"""melhorModeloML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PoNZgtewE6_PSUEVM6qGpNomvwkINsaf

# Dataset  Segmentação de Clientes de Shopping

# Accuracy K-Means: 47.50%
# Accuracy KNN: 48.53%
# Accuracy Tree-Decision: 55% (O MELHOR MODELO)
# Accuracy Naive Bayes: [For 1: 50% - For 2: 47%]
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import pandas as pd

from matplotlib import pyplot as plt

from sklearn.cluster import KMeans
from sklearn.neighbors import KNeighborsClassifier
from sklearn import tree
import graphviz
from sklearn.naive_bayes import GaussianNB
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import KFold

from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
from sklearn.metrics import accuracy_score
from sklearn.metrics import precision_recall_fscore_support as score

import seaborn as sns

df_dataset = pd.read_csv("/content/drive/MyDrive/Facens/S2A2022/Aprendizagem de Máquina/2022-09-24 Tarefa Modelos (O Melhor)/dataset.csv")
#IMPORTANDO DATASET E LENDO COM PD.READ_"tipoArquivo"

print(df_dataset)

df_dataset.info()
#VISUALIZAÇÃO DO DATASET

df_dataset.describe()
#DESCRIÇÃO MATEMATICA DOS DADOS, MÉDIAS, ETC

sns.pairplot(df_dataset.iloc[:, [0,2,3,4]])

#Seleciona todas as linhas das colunas da lista

#sns.pairplot
#Ajuda na analise estatistica com plot

x = df_dataset.iloc[:, [0,2,3,4]].values
y = df_dataset.iloc[:,1].values

print(x)
print(y)

y[y == 'Male'] = 0
y[y == 'Female'] = 1
y

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, shuffle=True)

#x_train = padrão de treinamento, x_test=padrão de test
#y_train = rótulo de treinmaneot, y_test = rótulo de teste

print(x_train.shape)
print(x_test.shape)

"""# K-means"""

k_means_model = KMeans(n_clusters=2, init='k-means++', n_init=20, max_iter=600, random_state=0)

# Modelo de KMeans
# n_clusters=3 = 3 centroides para o modelo
# k-means =
# n_init=10 = faz 10 modelos com posições aleatórias
# max_iter=300 = treina o modelo por 300 vezes (Quantidade escolhida)
# random_state=0 =

k_means_model.fit(x_train)
k_means_model.cluster_centers_

# pred_y ... fit_predict = treina o modelo e já demonstra a saída do modelo
# cluster_centers_ = demonstra os centróides

plt.scatter(x_train[:, 0], x_train[:,1], c = y_train)
plt.grid()

plt.scatter(k_means_model.cluster_centers_[:,0], k_means_model.cluster_centers_[:,1], s = 100, c = 'red')

y_pred = k_means_model.predict(x_test)
y_test = y_test.astype(np.int32)

cm = confusion_matrix(y_test, y_pred)

labels = ['Male', 'Female']

cmd = ConfusionMatrixDisplay(cm, display_labels=labels)
cmd.plot()

print('Accuracy: %.2f%%' % (accuracy_score(y_test, y_pred) * 100))

# Accuracy = Medida de Acerto --- Quanto maior, melhor

precision, recall, fscore, support = score(y_test, y_pred)

print('precision: {}'.format(precision))
print('recall: {}'.format(recall))
print('fscore: {}'.format(fscore))
print('support: {}'.format(support))

# MATRIZES DE CONFUSÃO
# Accuracy = Percentual de Acerto
# Precision = Percentual de acerto referente aos positivos
# Recall = Percentual de acerto dos positivos pelos positivos e falsos positivos

"""#KNN"""

def normalize(X): #função de normalização
  xmax = X.max()
  xmin = X.min()

  return (X - xmin)/(xmax - xmin)

x = normalize(df_dataset.iloc[:, [0,2,3,4]].values)
y = df_dataset.iloc[:,1].values

print(x)
print(y)

y[y == 'Male'] = 0
y[y == 'Female'] = 1
y

x = np.asarray(x)
y = np.asanyarray(y, dtype=int) #converte string e int

print(x)

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, shuffle=True)

#x_train = padrão de treinamento, x_test=padrão de test
#y_train = rótulo de treinmaneot, y_test = rótulo de teste

print(x_train.shape)
print(x_test.shape)

k_nn_model = KNeighborsClassifier(n_neighbors=3)

k_nn_model.fit(x_train, y_train)

plt.scatter(x_train[:, 1], x_train[:,3], c = y_train)
plt.grid()

y_pred = k_nn_model.predict(x_test)
y_test = y_test.astype(np.int32)

cm = confusion_matrix(y_test, y_pred)

labels = ['Male', 'Female']

cmd = ConfusionMatrixDisplay(cm, display_labels=labels)
cmd.plot()

print('Accuracy: %.2f%%' % (accuracy_score(y_test, y_pred) * 100))

# Accuracy = Medida de Acerto --- Quanto maior, melhor

precision, recall, fscore, support = score(y_test, y_pred)

print('precision: {}'.format(precision))
print('recall: {}'.format(recall))
print('fscore: {}'.format(fscore))
print('support: {}'.format(support))

"""#Arvore de Decisão"""

decision_tree_model = tree.DecisionTreeClassifier()

decision_tree_model = decision_tree_model.fit(x_train, y_train)

tree.plot_tree(decision_tree_model)

dot_data = tree.export_graphviz(decision_tree_model, out_file=None)
graph = graphviz.Source(dot_data)
graph.render("decision-tree")

y_pred = decision_tree_model.predict(x_test)
y_test = y_test.astype(np.int32)

decision_tree_model.predict_proba(x_test)

cm = confusion_matrix(y_test, y_pred)

labels = ['Male', 'Female']

cmd = ConfusionMatrixDisplay(cm, display_labels=labels)
cmd.plot()

print('Accuracy: %.2f%%' % (accuracy_score(y_test, y_pred) * 100))

# Accuracy = Medida de Acerto --- Quanto maior, melhor

precision, recall, fscore, support = score(y_test, y_pred)

print('precision: {}'.format(precision))
print('recall: {}'.format(recall))
print('fscore: {}'.format(fscore))
print('support: {}'.format(support))

"""# Naive Bayes"""

decision_naive_bayes_model = GaussianNB()

cross_val_score(decision_naive_bayes_model, x, y, cv=5, scoring='accuracy')

#Inserindo modelo Kfold pelo for de 5
k_fold = KFold(n_splits=2, shuffle=True)
labels = ['Male', 'Female']

for train_index, test_index in k_fold.split(x):

    x_train = x[train_index]
    y_train = y[train_index]

    x_test = x[test_index]
    y_test = y[test_index]

    decision_naive_bayes_model.fit(x_train, y_train)
    y_pred = decision_naive_bayes_model.predict(x_test)

    cm = confusion_matrix(y_test, y_pred)

    cmd = ConfusionMatrixDisplay(cm, display_labels=labels)
    cmd.plot()


    print('Accuracy: %.2f%%' % (accuracy_score(y_test, y_pred) * 100))

    precision, recall, fscore, support = score(y_test, y_pred)

    print('precision: {}'.format(precision))
    print('recall: {}'.format(recall))
    print('fscore: {}'.format(fscore))
    print('support: {}'.format(support))

